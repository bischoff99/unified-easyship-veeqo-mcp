version: '3.8'

services:
  # Main MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: unified-easyship-veeqo-mcp
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - EASYPOST_API_KEY=${EASYPOST_API_KEY:-mock}
      - VEEQO_API_KEY=${VEEQO_API_KEY}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "import('http').then(http => { const req = http.request({hostname: 'localhost', port: process.env.PORT || 3000, path: '/health', method: 'GET'}, res => { process.exit(res.statusCode === 200 ? 0 : 1) }); req.on('error', () => process.exit(1)); req.end(); })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  # Development version with hot reload
  mcp-server-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: unified-easyship-veeqo-mcp-dev
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      - EASYPOST_API_KEY=${EASYPOST_API_KEY:-mock}
      - VEEQO_API_KEY=${VEEQO_API_KEY}
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    command: npm run dev
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - dev

  # FastMCP Server variant
  mcp-server-fastmcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: unified-easyship-veeqo-mcp-fastmcp
    ports:
      - '3002:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - EASYPOST_API_KEY=${EASYPOST_API_KEY:-mock}
      - VEEQO_API_KEY=${VEEQO_API_KEY}
    volumes:
      - ./logs:/app/logs
    command: ['node', 'dist/server/fastmcp-server.js']
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "import('http').then(http => { const req = http.request({hostname: 'localhost', port: process.env.PORT || 3000, path: '/health', method: 'GET'}, res => { process.exit(res.statusCode === 200 ? 0 : 1) }); req.on('error', () => process.exit(1)); req.end(); })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
    profiles:
      - fastmcp

networks:
  mcp-network:
    driver: bridge

volumes:
  logs:
    driver: local
